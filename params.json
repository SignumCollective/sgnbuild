{
  "name": "sgnbuild",
  "tagline": "A web application build system",
  "body": "## A web application build system\r\n\r\nMotto: _it works, nothing more_\r\n\r\n## Building instructions\r\n\r\n 1. Install sgnbuild from npm\r\n\r\n    ```sh\r\n    npm install --global sgnbuild\r\n    ```\r\n\r\n 2. Build\r\n\r\n    ```sh\r\n    sgnbuild\r\n    ```\r\n\r\n 3. Install\r\n\r\n    ```sh\r\n    npm install --global\r\n    ```\r\n\r\n## Usage instructions\r\n\r\nAll configuration is done within an object called `\"sgnbuild\"` in your project's `package.json`.\r\n\r\n - `sgnbuild.type: string`:\r\n   - `\"web\"`: Build a web application with Rollup, Webpack, and Babel\r\n   - `\"node\"`: Build a Node application with Rollup, outputting CommonJS\r\n   - `\"library\"`: Build a library with Rollup, outputting UMD\r\n - `sgnbuild.root: string`: Directory in which to find `es6/index.js`\r\n - `sgnbuild.global: string`: If `sgnbuild.type` is `\"library\"`, this sets the global to put all exported fields in if the environment is not CommonJS or AMD.\r\n - `sgnbuild.uglify: boolean`: If `sgnbuild.type` is `\"web\"`, the bundle will be run through UglifyJS.\r\n\r\nTake a look at sgnbuild's `package.json` to see an example which is enough for most circumstances:\r\n\r\n```json\r\n\"sgnbuild\": {\r\n  \"type\": \"node\"\r\n}\r\n```\r\n\r\nYou MUST have `babel-runtime` in your project's dependencies.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}